[["index.html", "Manual equipe Inteligência re.green 1 Introdução", " Manual equipe Inteligência re.green construído pela equipe 1 Introdução Este é o manual da equipe de inteligência. Aqui definimos o que acreditamos e aplicamos em nosso cotidiano de trabalho. "],["a-diretoria-de-inteligência.html", "2 A diretoria de inteligência 2.1 Mandatos 2.2 Diversidade", " 2 A diretoria de inteligência 2.1 Mandatos Garantir que a inovação e agilidade estão se difundindo na empresa Melhorar o fluxo de informações nos níveis Estratégico e Operacional Nós aplicamos e difundimos o modo de pensar ágil e ferramentas quantitativas, para sermos mais competitivos, resilientes frente a incertezas, e melhores na tomada de decisão. Nós utilizamos a forma de pensar ágil, modelos científicos, análise de dados e soluções de tecnologia. 2.2 Diversidade Nos esforçamos para garantir que nossa equipe de esteja atenta a aspectos de diversidade, equidade, inclusão e competência cultural. Enxergamos a riqueza da própria vida na diversidade de opiniões e modos de ser, na multiplicidade de histórias e de escolhas pessoais Nós valorizamos a diversidade e estamos em constante aprendizado de como lidar com ela e, mais especialmente, aprimorá-la em nossa equipe. "],["convenções-de-código-dados-e-metadados.html", "3 Convenções de código, dados e metadados 3.1 Convenções de código 3.2 Dependência de pacotes 3.3 Repositórios de código 3.4 Padrão de metadados 3.5 Entrega dos dados", " 3 Convenções de código, dados e metadados Este capítulo fornece convenções de código e dados para os projetos analíticos da empresa re.green. Para informações adicionais, consulte o time de inteligência de dados: Sara Mortara, Felipe Bocca ou Nathalia Monalisa. 3.1 Convenções de código 3.1.1 Geral Os projetos da re.green são normalmente desenvolvidos na linguagem R e seguem o padrão de estilo do tidyverse. É possível utilizar o pacote styler para formatar e checar a consistência do código em relação ao padrão desejado. As principais regras de estilo a serem seguidas estão descritas abaixo: Disposição do código Espaçamento Tamanho Máximo de Linha Organização interna Símbolo de atribuição Uso de Aspas Comentários Convenção de nomes Nomes de Arquivos Nomes de Variáveis seguindo snake_case Indicação de localização dos arquivos: sempre que possível, usar caminhos relativos Regras gerais para funções Além das regras de definição de funções descritas no tópico acima, é necessário que todas elas estejam documentadas seguindo o padrão roxygen2, incluindo funções auxiliares. Cada função deve estar em um arquivo separado. Além disso, as funções devem conter controle de fluxo e exceções com blocos tryCatch(). Para ver um exemplo de função documentada, cheque o guia de estilo do tidyverse. Ou consulte o nosso repositório de exemplos. 3.2 Dependência de pacotes Para gerenciamento de dependências, deve-se utilizar o pacote renv para referenciar todas as bibliotecas utilizadas no projeto e suas respectivas versões. 3.3 Repositórios de código 3.3.1 Geral Para entrega de produtos que envolvam código, os arquivos deverão ser entregues em um repositório no github da empresa. O link será fornecido e será dada autorização para inclusão de colaboradores(as) com papel de escrita. O repositório também deve conter um README.md detalhado, informando: - contexto do projeto - árvore com a estrutura de arquivos/diretórios do bucket de armazenamento dos dados na nuvem (ver seção Entrega de dados) - link do bucket de armazenamento dos dados na nuvem - indicação das funções onde cada conjunto de dados é inputado - desenvolvedores do projeto e contato (e-mail) 3.3.2 Conteúdo do repositório Seguir estrutura de pastas de acordo com a definição abaixo: . ├── README.md # contém intruções gerais para uso ├── renv.lock* # contém dependências ├── script/ # contém scripts de exemplo de chamada das funções └── functions/ # contém funções documentadas, cada função em um arquivo separado 3.3.3 Versionamento A ramificação principal deve ser a main e armazenar a base de código principal, estando sempre funcional (sem código quebrado). Em relação ao fluxo de versionamento, sugerimos o Gitflow. Nele o desenvolvimento deve ser encapsulado em um ramo dev que funciona como pai para as ramificações de features e hot-fix. Uma vez que o ramo dev tenha adquirido código novo o suficiente para que o produto seja considerado uma nova versão, deve-se fazer o merge com o ramo principal main. Para mais informações, consulte o tutorial e veja a figura abaixo que ilustra a ideia básica do gitflow: gitflow 3.4 Padrão de metadados Todo conjunto de dados deve apresentar um arquivo de metadados associado com informações que descrevem o conjunto, de acordo com o padrão abaixo. O nome do arquivo deve seguir a estrutura: metadata_&lt;nome_do_arquivo&gt;.ext. Para ver exemplos, consulte a pasta metadata/ no nosso repositório de exemplos. 3.4.1 1 - Dados tabulares: Metadado no formato .csv seguindo o padrão: Nome da variável Descrição da variável Tipo de dado da variável Exemplo da variável Exemplo: Variável Descrição Tipo de dado Exemplo Gênero Gênero da espécie caractere Schinus Forma de vida Descrição da forma de vida da espécie caractere árvore; epífita 3.4.2 2- Dados espaciais Metadado no formato .txt ou .xml seguindo o padrão: 2.1.Shapefile Tipo: classe geométrica do objeto (ponto, linha ou polígono) Sistema de coordenadas (CRS): método de projeção dos dados Escala: relação entre a distância no mapa/arquivo e a distância no chão Atributos: nome das colunas que descrevem os elementos registrados nas linhas do arquivo 2.2.Raster Tipo: classe do objeto importado (RasterLayer, RasterStack ou RasterBrick) Extensão: cobertura geográfica total ocupada pelo objeto espacial (xmin, xmax, ymin, ymax) Sistema de coordenadas (CRS): método de projeção dos dados Resolução: área real coberta por cada pixel Colunas: número de colunas Valores: número de registros 3.5 Entrega dos dados Todos os dados e metadados de um produto devem ser armazenados em um bucket AWS, cujo link será disponibilizado pela re.green. É absolutamente necessário que os diretórios estejam organizados, seguindo uma hierarquia lógica, sem arquivos misturados às pastas. Abaixo segue uma sugestão de árvore de diretórios, mas mudanças podem ser implementadas se ajudam a refinar a organização da estrutura: . |__ project_name | |__ data | |__ csv | | |____ file1.csv | | |____ file2.csv | | | |__ rasters | | |____ file3.tif | | | |__ shapes | | |____ file4.gpkg | | | |__ metadata | |____ metadata_file1.csv | |____ metadata_file2.csv | |____ metadata_file3.txt | |____ metadata_file4.txt "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
